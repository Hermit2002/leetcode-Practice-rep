#include <iostream>
#include <vector>

class Solution {
public:
    int first(std::vector<int>& nums, int n, int target) {
        n = nums.size();
        int first = -1;
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                first = mid;
                high = mid - 1;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return first;
    }

    int last(std::vector<int>& nums, int n, int target) {
        n = nums.size();
        int last = -1;
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (nums[mid] == target) {
                last = mid;
                low = mid + 1;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return last;
    }

    std::vector<int> searchRange(std::vector<int>& nums, int target) {
        int n = nums.size();
        return {first(nums, n, target), last(nums, n, target)};
    }
};

int main() {
    Solution solution;
    std::vector<int> nums = {1, 2, 2, 2, 3, 4, 5, 5, 6};
    int target = 2;
    
    std::vector<int> result = solution.searchRange(nums, target);

    if (result[0] != -1) {
        std::cout << "Target " << target << " first appears at position " << result[0] << std::endl;
        std::cout << "Target " << target << " last appears at position " << result[1] << std::endl;
    } else {
        std::cout << "Target " << target << " not found in the array." << std::endl;
    }

    return 0;
}
